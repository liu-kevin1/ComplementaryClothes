{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nexport default {\n  get name() {\n    return 'ExpoSharing';\n  },\n\n  isAvailableAsync: function isAvailableAsync() {\n    return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof navigator === 'undefined')) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 2:\n            return _context.abrupt(\"return\", !!navigator.share);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  shareAsync: function shareAsync(url) {\n    var options,\n        sharingNavigator,\n        _args2 = arguments;\n    return _regeneratorRuntime.async(function shareAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            sharingNavigator = navigator;\n\n            if (!sharingNavigator.share) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(sharingNavigator.share(_objectSpread(_objectSpread({}, options), {}, {\n              url: url\n            })));\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n            throw new UnavailabilityError('navigator', 'share');\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoSharing.web.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,mBAAT,QAAoC,kBAApC;AAUA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,aAAP;AACD,GAHY;;AAIP,EAAA,gBAJO;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKP,OAAO,SAAP,KAAqB,WALd;AAAA;AAAA;AAAA;;AAAA,6CAMF,KANE;;AAAA;AAAA,6CASJ,CAAC,CAAE,SAAuB,CAAC,KATvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,EAAA,UAXO,sBAWI,GAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWiB,YAAA,OAXjB,8DAWyC,EAXzC;AAYL,YAAA,gBAZK,GAYyB,SAZzB;;AAAA,iBAeP,gBAAgB,CAAC,KAfV;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAgBI,gBAAgB,CAAC,KAAjB,iCAA4B,OAA5B;AAAqC,cAAA,GAAG,EAAH;AAArC,eAhBJ;;AAAA;AAAA;;AAAA;AAAA,kBAkBH,IAAI,mBAAJ,CAAwB,WAAxB,EAAqC,OAArC,CAlBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\ntype ShareOptions = { title?: string; text?: string; url?: string };\n\ntype NavigatorShare = (options: ShareOptions) => Promise<object>;\n\ninterface Navigator {\n  share?: NavigatorShare;\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoSharing';\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    if (typeof navigator === 'undefined') {\n      return false;\n    }\n\n    return !!(navigator as Navigator).share;\n  },\n  async shareAsync(url: string, options: ShareOptions = {}): Promise<object> {\n    const sharingNavigator: Navigator = navigator as Navigator;\n\n    // NOTE: `navigator.share` is only available via HTTPS\n    if (sharingNavigator.share) {\n      return await sharingNavigator.share({ ...options, url });\n    } else {\n      throw new UnavailabilityError('navigator', 'share');\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}